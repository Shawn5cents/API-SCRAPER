#!/usr/bin/env python3
"""
Thunderbird Folder Setup for Load Emails
Creates folder structure and filter rules for organizing incoming loads
"""

import os
import subprocess
import json
from pathlib import Path

class ThunderbirdFolderSetup:
    def __init__(self):
        self.thunderbird_profile = self.find_thunderbird_profile()
        self.load_folder_name = "LOADS"
        self.subfolder_names = [
            "NEW_LOADS",
            "RESPONDED", 
            "BOOKED",
            "REJECTED"
        ]
        
        print("📁 Thunderbird Folder Setup for Load Organization")
        print("=" * 60)
        
    def find_thunderbird_profile(self):
        """Find Thunderbird profile directory"""
        possible_paths = [
            os.path.expanduser("~/.thunderbird"),
            os.path.expanduser("~/snap/thunderbird/common/.thunderbird"),
            os.path.expanduser("~/.var/app/org.mozilla.Thunderbird/.thunderbird")
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"📂 Found Thunderbird directory: {path}")
                # Find default profile
                profiles_ini = os.path.join(path, "profiles.ini")
                if os.path.exists(profiles_ini):
                    with open(profiles_ini, 'r') as f:
                        content = f.read()
                        # Look for default profile path
                        for line in content.split('\n'):
                            if line.startswith('Path='):
                                profile_path = line.split('=')[1].strip()
                                full_profile_path = os.path.join(path, profile_path)
                                if os.path.exists(full_profile_path):
                                    print(f"📁 Profile found: {full_profile_path}")
                                    return full_profile_path
                                    
        print("⚠️  Thunderbird profile not found automatically")
        return None
    
    def create_filter_rules(self):
        """Create Thunderbird message filter rules for load emails"""
        
        # Thunderbird filter rules (msgFilterRules.dat format)
        filter_rules = '''# Mozilla User Preferences

/* Do not edit this file.
 *
 * If you make changes to this file while the application is running,
 * the changes will be overwritten when the application exits.
 *
 * To make a manual change to preferences, you can visit the URL about:config
 */

version="9"
name="Load Email Filter"
enabled="yes"
type="17"
action="Move to folder"
actionValue="mailbox://ordshawnnichols%40gmail.com/LOADS/NEW_LOADS"
condition="OR"
condition="subject,contains,load"
condition="subject,contains,cargo"
condition="subject,contains,sprinter"
condition="subject,contains,van"
condition="subject,contains,expedite"
condition="subject,contains,freight"
condition="subject,contains,shipment"
condition="body,contains,pickup"
condition="body,contains,delivery"
condition="body,contains,miles"
condition="body,contains,rate"
condition="body,contains,MC#"
condition="body,contains,DOT#"
'''

        return filter_rules
    
    def create_manual_instructions(self):
        """Create manual setup instructions"""
        instructions = f"""
📁 THUNDERBIRD FOLDER SETUP INSTRUCTIONS
========================================

Since automatic Thunderbird configuration requires the application to be closed,
here are step-by-step instructions to set up your load email organization:

🔧 STEP 1: CREATE FOLDER STRUCTURE
----------------------------------
1. Open Thunderbird
2. Right-click on your email account (ordshawnnichols@gmail.com)
3. Select "New Folder..."
4. Create main folder: "{self.load_folder_name}"
5. Right-click on "{self.load_folder_name}" folder
6. Create subfolders:
   - {self.subfolder_names[0]} (for new unprocessed loads)
   - {self.subfolder_names[1]} (for loads you've responded to)
   - {self.subfolder_names[2]} (for booked/won loads)
   - {self.subfolder_names[3]} (for rejected/passed loads)

🔧 STEP 2: CREATE MESSAGE FILTER
---------------------------------
1. Go to Tools → Message Filters
2. Click "New..." 
3. Filter Name: "Load Email Auto-Sort"
4. Set conditions (Match ANY of the following):
   - Subject contains: load
   - Subject contains: cargo
   - Subject contains: sprinter
   - Subject contains: van  
   - Subject contains: expedite
   - Subject contains: freight
   - Body contains: pickup
   - Body contains: delivery
   - Body contains: miles
   - Body contains: MC#
5. Action: "Move Message to" → Select "{self.load_folder_name}/{self.subfolder_names[0]}"
6. Click OK

🔧 STEP 3: ENABLE AUTOMATIC FILTERING
------------------------------------
1. In Message Filters window
2. Check "Load Email Auto-Sort" to enable
3. Check "Filter after Junk Classification" 
4. Click "Run Now" to test on existing emails
5. Close filter window

📋 FOLDER ORGANIZATION WORKFLOW
==============================
- 📥 NEW_LOADS: All incoming loads auto-sorted here
- 📤 RESPONDED: Move here after you reply/bid
- ✅ BOOKED: Move here for loads you win
- ❌ REJECTED: Move here for loads you pass on

🚀 INTEGRATION WITH MONITORING SYSTEM
=====================================
Your email monitoring system will also check the NEW_LOADS folder:
- Save .eml files to: {os.path.abspath('email_loads')}/
- Monitor will process them automatically
- Telegram notifications for all new loads

💡 PRO TIPS
===========
- Set up folder notifications for NEW_LOADS
- Use Thunderbird's Quick Filter bar to search loads
- Archive old loads monthly to keep folders organized
- Consider using tags/labels for load priorities

✅ SETUP COMPLETE
=================
Your inbox will now stay clean with all loads automatically sorted!
"""
        return instructions
    
    def create_thunderbird_addon_config(self):
        """Create configuration for potential Thunderbird addon"""
        config = {
            "name": "Load Email Organizer",
            "version": "1.0",
            "folders": {
                "main_folder": self.load_folder_name,
                "subfolders": self.subfolder_names
            },
            "filter_keywords": [
                "load", "cargo", "sprinter", "van", "expedite", 
                "freight", "shipment", "pickup", "delivery", 
                "miles", "rate", "MC#", "DOT#"
            ],
            "auto_actions": {
                "new_loads": "move_to_new_loads_folder",
                "responded": "manual_move_to_responded",
                "booked": "manual_move_to_booked", 
                "rejected": "manual_move_to_rejected"
            }
        }
        
        return json.dumps(config, indent=2)
    
    def setup_folders(self):
        """Main setup function"""
        print(f"🎯 Setting up load organization for: ordshawnnichols@gmail.com")
        print(f"📁 Main folder: {self.load_folder_name}")
        print(f"📂 Subfolders: {', '.join(self.subfolder_names)}")
        print()
        
        # Create instructions file
        instructions = self.create_manual_instructions()
        with open('thunderbird_setup_instructions.txt', 'w') as f:
            f.write(instructions)
        print("✅ Created: thunderbird_setup_instructions.txt")
        
        # Create filter config
        config = self.create_thunderbird_addon_config()
        with open('thunderbird_load_config.json', 'w') as f:
            f.write(config)
        print("✅ Created: thunderbird_load_config.json")
        
        # Create filter rules template
        filter_rules = self.create_filter_rules()
        with open('thunderbird_filter_template.txt', 'w') as f:
            f.write(filter_rules)
        print("✅ Created: thunderbird_filter_template.txt")
        
        print("\n🚀 NEXT STEPS:")
        print("1. Read thunderbird_setup_instructions.txt")
        print("2. Follow the manual setup steps in Thunderbird")
        print("3. Test the filter with existing emails")
        print("4. Your inbox will stay clean! 📧➡️📁")

def main():
    print("📁 THUNDERBIRD LOAD FOLDER ORGANIZER")
    print("=" * 50)
    
    setup = ThunderbirdFolderSetup()
    
    choice = input("\nCreate Thunderbird folder setup files? (y/n): ").lower()
    if choice == 'y':
        setup.setup_folders()
        print("\n✅ Setup files created! Check the instructions file.")
    else:
        print("📁 Folder setup ready when you need it!")

if __name__ == "__main__":
    main()